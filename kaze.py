# Bot Discord pour le serveur Discord des 1√®re ann√©e de BUT Info de l'IUT de Lannion
# Version 2.1
# Retrouvez moi sur Discord : awkaze_

# =============IMPORTS=============
import discord, datetime, time, asyncio, os, mysql.connector
from discord.ext import commands
from discord import app_commands
from random import randint, choice
from dotenv import load_dotenv

load_dotenv() # chargement des variables d'environnement (ici, le token du bot)

# ============= CLASSE BOT =============
class Bot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.typing = False
        intents.presences = False
        intents.members = True
        intents.bans = True
        intents.messages = True
        intents.reactions = True
        intents.message_content = True
        super().__init__(command_prefix = "!", intents = intents, help_command=None)

    async def setup_hook(self):
        await self.tree.sync(guild = discord.Object(id = 1136325238225895444))
        print(f" Commandes slash de {self.user} activ√©es.")

bot = Bot() # cr√©ation d'une instance de la classe Bot


# ============= CONNEXION BDD =============

# les variables d'environnement sont stock√©es dans un fichier .env pour des raisons de s√©curit√©

mydb = mysql.connector.connect(
    host=os.getenv("HOST"),
    user=os.getenv("UTILISATEUR"),
    password=os.getenv("MDP_BDD"),
    database=os.getenv("BDD")
)

cursor = mydb.cursor(dictionary=True) # r√©cup√©ration des r√©sultats sous forme de dictionnaire

"""
Schema de la base de donn√©es :

kactif : id, kdate 
kbanque : banque_id, montant, bclassement 
kactivite : id, pts, aclassement, treact
kinfos : salon, activite

"""


# ============= FONCTIONS =============

async def ping_db(cursor):
    """
    Envoie de ping √† la base de donn√©es pour √©viter les d√©connexions car l'hebergeur que j'utilise (Hostinger) 
    coupe la connexion au bout de 30 secondes d'inactivit√©, et parfois m√™me moins.

    On prend donc pas de risque et on envoie un ping toutes les 1 secondes.
    Ca ne risque pas de surchager la base de donn√©es car c'est une op√©ration tr√®s rapide.
    """

    while True:
        cursor.execute("SELECT * FROM kinfos")
        donnees = cursor.fetchall()
        await asyncio.sleep(1) # on attend 1 seconde avant de renvoyer un ping
    

async def verification_conditions(cursor):
    """
    Fonction qui r√©cup√®re les param√®tres actuels d'activit√© de la base de donn√©es.
    Retourne un tuple (jeu, salon) o√π `jeu` est un bool√©en qui indique si on peut lancer le jeu d'activit√©
    et `salon` est l'ID du salon si il a √©t√© choisi, sinon None.
    """
    cursor.execute("SELECT * FROM kinfos")
    donnees = cursor.fetchall()
    for row in donnees:
        if str(row['activite']) == "1" and row['salon'] is not None:
            return True, int(row['salon'])
    return False, None

async def recompense_activite():
    """
    Fonction pour envoyer un message al√©atoire dans le salon d'activit√© du serveur toutes les 1 √† 3 heures (al√©atoire), 
    avec une r√©action √† cliquer pour gagner 1 point d'activit√©.
    Le but est de r√©compenser les membres les plus actifs, et de cr√©er une comp√©tition entre eux.
  
    On commence par r√©cup√©rer les informations de la table kinfos pour savoir si les messages d'activit√© sont activ√©s et si un salon a √©t√© choisi.
    Si c'est le cas, on lance le jeu d'activit√© comme d√©crit ci-dessus.
    Sinon, on attend 1 minute avant de v√©rifier √† nouveau si ces conditions sont remplies.
    L'attente est n√©cessaire pour √©viter de surcharger le bot et le serveur, sinon il est impossible d'effectuer d'autres actions
    comme r√©pondre √† des commandes ou envoyer des messages.
    """
    while True:
        jeu, salon_id = await verification_conditions(cursor)
        if not jeu:
            await asyncio.sleep(60) # on attend 1 minute avant de v√©rifier √† nouveau
        if jeu:
            channel = bot.get_channel(salon_id)
            await asyncio.sleep(randint(3600, 10800)) # 1 √† 3 heures

            message = await channel.send("Clique sur la r√©action ci-dessous en premier pour marquer 1 point. Merci pour ton activit√© !")
            await message.add_reaction(choice(["üî•", "üåü", "üéâ", "üéà", "üéÅ", "üéä", "üçæ", "üéá", "üéÜ", "üå†", "üåÖ", "üåÑ", "üåÉ", "üåâ", "üåÅ"]))
            messagetime = datetime.datetime.now() # r√©cup√©rer le moment o√π la r√©action apparait

            reaction, user = await bot.wait_for("reaction_add", check=lambda reaction, user: user != bot.user and reaction.message.id == message.id)
            reactiontime = datetime.datetime.now() # r√©cup√©rer le moment o√π l'utilisateur appuie sur la r√©action
            await channel.send(f"<@{user.id}> a gagn√© le point !")

            cursor.execute(f"SELECT a.id, a.pts, a.aclassement, a.treact, bq.montant, bq.bclassement FROM kactivite AS a LEFT JOIN kbanque AS bq ON a.id = bq.banque_id WHERE a.id = {user.id}")
            donnees = cursor.fetchall()

            utilisateur_trouve = False 
            temps_reaction = (reactiontime - messagetime).total_seconds()


            async def give_money(howmuch, mydb, cursor, user):
                """
                Fonction pour donner de l'argent √† un utilisateur lorsqu'il r√©agit √† un message d'activit√© et gagne un point.
                """
                
                cursor.execute(f"SELECT a.id, a.pts, a.aclassement, a.treact, bq.montant, bq.bclassement, act.kdate FROM kactivite AS a LEFT JOIN kbanque AS bq ON a.id = bq.banque_id LEFT JOIN kactif AS act ON a.id = act.id WHERE a.id = {user.id}")
                donnees = cursor.fetchall()

                inbanque = False
                for row in donnees:
                    if row['montant'] is not None:
                        actuel = int(row['montant'])
                        nouveau = actuel + howmuch

                        # Update 
                        sql = "UPDATE kbanque SET montant = %s"
                        val = (str(nouveau),) # on met une virgule pour que le tuple soit bien reconnu par la m√©thode execute()
                        cursor.execute(sql, val)
                        inbanque = True
                if not inbanque:
                    # si on ne trouve pas l'utilisateur 
                    sql = "INSERT INTO kbanque (banque_id, montant, bclassement) VALUES (%s, %s, %s)"
                    val = (user.id, f"{howmuch}", "1")
                    cursor.execute(sql, val)

            async def search_money(mydb, cursor, user):
                cursor.execute(f"SELECT a.id, a.pts, a.aclassement, a.treact, bq.montant, bq.bclassement FROM kactivite AS a LEFT JOIN kbanque AS bq ON a.id = bq.banque_id WHERE a.id = {user.id}")
                donnees = cursor.fetchall()

                chan = await user.create_dm()
                
                # Cr√©er un dictionnaire pour associer chaque valeur √† la somme correspondante
                rewards = {
                    "5": "50",
                    "10": "100",
                    "20": "500",
                    "30": "750",
                    "40": "1500",
                    "50": "5000",
                    "75": "10000",
                    "100": "25000"
                }

                # V√©rifier si la valeur existe dans le dictionnaire rewards
                for row in donnees:
                    if str(row['pts']) in rewards:
                        # Utiliser la somme associ√©e √† la valeur de ['pts']
                        await give_money(int(rewards[str(row['pts'])]), mydb, cursor, user)
                        await chan.send(f"Bravo, tu viens d'obtenir {rewards[str(row['pts'])]}‚Ç≠ pour avoir atteint {row['pts']} points d'activit√©. Continue comme √ßa !")
                    else:
                        await give_money(10, mydb, cursor, user)


            for row in donnees:
                if row['pts'] is not None:
                
                    treact = float(row['treact'])
                    nouveau = int(row['pts']) + 1
                    moyreact = (treact+float(temps_reaction))/2

                    sql = "UPDATE kactivite SET pts = %s, aclassement = %s, treact = %s WHERE id = %s"
                    val = (str(nouveau), "1", str(moyreact), f"{user.id}")
                    cursor.execute(sql, val)
                    utilisateur_trouve = True

            if not utilisateur_trouve:
                # si on ne trouve pas l'utilisateur 
                sql = "INSERT INTO kactivite (id, pts, aclassement, treact) VALUES (%s, %s, %s, %s)"
                val = (user.id, "1", "1", f"{temps_reaction}")
                cursor.execute(sql, val)
            
            await search_money(mydb, cursor, user)

            mydb.commit()

async def the_activity():
    """
    Fonction qui modifie le statut du bot sur Discord.
    """
    global start_time # on r√©cup√®re la variable start_time d√©clar√©e dans la fonction on_ready()
    start_time = time.time()
    await bot.change_presence(activity=discord. Activity(type=discord.ActivityType.watching, name="bient√¥t..."))

async def guess_nb(channel, message):
    """
    Fonction pour lancer le jeu o√π il faut deviner un nombre entre 1 et 100.
    L'avantage c'est que la fonction est asynchrone, ce qui permet de continuer √† utiliser le bot normalement pendant que le jeu tourne.
    """
    number = str(randint(1,100))
    while True:
        def check(m):
            return m.content == number and m.channel == channel
        try:
            msg = await bot.wait_for('message', check=check, timeout=120.0)
            await channel.send(f'{msg.author.mention} a gagn√© ! Le nombre √† deviner √©tait {number}.')
            
        except asyncio.TimeoutError:
            await message.reply(f"Temps √©coul√© ! Le nombre √† deviner √©tait {number}.")
            break  
   
# ======== EVENEMENTS ========
@bot.event
async def on_ready():
    """
    Fonction qui s'ex√©cute lorsque le bot se connecte √† Discord.
    """
    print(f'{bot.user.name} est connect√© !')
    bot.loop.create_task(the_activity())
    bot.loop.create_task(recompense_activite())
    bot.loop.create_task(ping_db(cursor))
    # bot.loop.create_task() permet de continuer √† utiliser le bot normalement pendant que ces fonctions tournent en arri√®re-plan

@bot.event
async def on_message(message): 
    """
    Fonction qui s'ex√©cute √† chaque fois qu'un message est envoy√© sur le serveur.
    """
    await bot.process_commands(message) 


@bot.event
async def on_member_join(member):
    """
    Fonction qui s'ex√©cute lorsque qu'un membre rejoint le serveur.
    """
    await member.send("Bienvenue sur le serveur Discord des 1√®re ann√©e de BUT Info de l'IUT de Lannion ! Tu n'as plus qu'√† envoyer ton nom et pr√©nom dans le salon verification pour avoir acc√®s √† l'ensemble du serveur. :slight_smile:")
    channel = bot.get_channel(1136341234189869227)
    guild = bot.get_guild(1136325238225895444)
    await channel.send(f"Bienvenue √† {member.mention} qui vient de d√©barquer sur le serv ! On est {str(guild.member_count)}.")

@bot.event
async def on_member_remove(member):
    """
    Fonction qui s'ex√©cute lorsque qu'un membre quitte le serveur.
    """
    channel = bot.get_channel(1136341234189869227)
    guild = bot.get_guild(1136325238225895444)
    await channel.send(f"{member.name} s'est cass√© du serv.. On est plus que {str(guild.member_count)}.")

@bot.event
async def on_command_error(ctx, error):
    """
    Fonction qui s'ex√©cute lorsqu'une erreur survient lors de l'ex√©cution d'une commande.
    """
    if isinstance(error, commands.CommandOnCooldown): # si l'erreur est une commande en cooldown
        cooldown = error.retry_after # on r√©cup√®re le temps restant avant de pouvoir r√©utiliser la commande
        await ctx.reply(f"Doucement, tu ne peux utiliser cette commande qu'une fois par minute. R√©essaye dans `{str(cooldown)[:str(cooldown).find('.')]}` secondes.")

# =================== COMMMANDES=====================
        
# ===== CHOIX SALON =====

@bot.hybrid_command(name = "salon", with_app_command = True, description = "Choisis le salon dans lequel tu veux que j'envoie les messages de r√©compense d'activit√©.")
@app_commands.guilds(discord.Object(id = 1136325238225895444))
async def salon(ctx: commands.Context, salon=None):
    """
    Fonction pour choisir le salon dans lequel les messages d'activit√© seront envoy√©s.
    """

    # on verifie que l'utilisateur est bien un admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.reply("Tu dois √™tre administrateur pour utiliser cette commande.")
        return
    else:
        cursor.execute(f"SELECT * FROM kinfos")
        donnees = cursor.fetchall()

        try:
            for row in donnees:
                if row['salon'] is not None: # si un salon a d√©j√† √©t√© choisi
                    if salon is None: # si l'utilisateur n'a pas pr√©cis√© de salon √† l'appel de la commande
                        if row['salon'] == ctx.channel.id: 
                            await ctx.reply("Ce salon est d√©j√† d√©fini comme salon d'activit√©.")
                        else: 
                            sql = "UPDATE kinfos SET salon = %s"
                            val = (ctx.channel.id,) # on met une virgule pour que le tuple soit bien reconnu par la m√©thode execute()
                            cursor.execute(sql, val)
                            await ctx.reply(f"Nouveau salon d'activit√© : <#{ctx.channel.id}>.")
                    else:
                        salon = bot.get_channel(int(salon[2:-1])) # on enl√®ve les 2 premiers caract√®res et le dernier pour ne garder que l'id car le format est <#id>
                        if row['salon'] == salon.id: 
                            await ctx.reply(f"Le salon <#{salon.id}> est d√©j√† d√©fini comme salon d'activit√©.")
                        else:
                            sql = "UPDATE kinfos SET salon = %s"
                            val = (str(salon.id),) # on met une virgule pour que le tuple soit bien reconnu par la m√©thode execute()
                            cursor.execute(sql, val)
                            await ctx.reply(f"Nouveau salon d'activit√© : <#{salon.id}>.")
                else: 
                    if salon is None:
                        sql = "INSERT INTO kinfos (salon) VALUES (%s)"
                        val = (str(ctx.channel.id))
                        cursor.execute(sql, val)
                        await ctx.reply(f"Salon d'activit√© d√©fini sur <#{salon.id}>.")
                    else: 
                        sql = "INSERT INTO kinfos (salon) VALUES (%s)"
                        val = (str(salon.id))
                        cursor.execute(sql, val)
                        await ctx.reply(f"Salon d'activit√© d√©fini sur <#{salon.id}>.")
            mydb.commit()
        except:
            await ctx.reply("Mauvaise syntaxe. Consulte l'aide (`/help`) pour plus d'informations. ")


# ===== ACTIVITE =====

@bot.hybrid_command(name = "activite", with_app_command = True, description = "Choisir d'activer ou de d√©sactiver les messages d'activit√©.")
@app_commands.guilds(discord.Object(id = 1136325238225895444))
async def activite(ctx: commands.Context):
    """
    Fonction pour activer ou d√©sactiver les messages d'activit√©.
    """
    # on verifie que l'utilisateur est bien un admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.reply("Tu dois √™tre administrateur pour utiliser cette commande.")
        return
    else:
        cursor.execute(f"SELECT * FROM kinfos")
        donnees = cursor.fetchall()

        for row in donnees:
            if str(row['activite']) == "1":
                sql = "UPDATE kinfos SET activite = %s"
                val = ("0",)
                cursor.execute(sql, val)
                await ctx.reply("Les messages d'activit√© sont d√©sormais d√©sactiv√©s.")
            else:
                if row['salon'] is None:
                    await ctx.reply("Tu dois d'abord choisir un salon dans lequel les messages d'activit√© seront envoy√©s avec la commande `/salon` avant de pouvoir les activer !")
                else:
                    sql = "UPDATE kinfos SET activite = %s"
                    val = ("1",)
                    cursor.execute(sql, val)
                    await ctx.reply("Les messages d'activit√© sont d√©sormais activ√©s.")
        
        mydb.commit()

# ===== PING =====

@bot.hybrid_command(name = "ping", with_app_command = True, description = "afficher le temps de r√©action du bot.")
@app_commands.guilds(discord.Object(id = 1136325238225895444))
async def ping(ctx: commands.Context):
    """
    Fonction pour afficher le temps de r√©action du bot.
    """
    latency = bot.latency * 1000  # on convertit la latence renvoy√©e par la m√©thode en millisecondes
    await ctx.reply(f'Pong! Je r√©ponds avec une latence de : {latency:.2f} ms')


# ===== SAY =====

@bot.command()
async def say(ctx, *, message=None):
    """
    Fonction pour r√©p√©ter un message.
    """
    if ctx.author.id == 713900037796659211:
        if message != None:
            await ctx.message.delete()
            await ctx.send(message)
        else:
            await ctx.reply("Qu'est-ce que tu veux que je dise ?")

# ===== UPTIME =====
        
@bot.hybrid_command(name = "uptime", with_app_command = True, description = "Affiche le temps √©coul√© depuis le lancement du bot")
@app_commands.guilds(discord.Object(id = 1136325238225895444))
async def uptime(ctx: commands.Context):
    """
    Fonction pour afficher le temps √©coul√© depuis le lancement du bot.
    """
    current_time = time.time()
    difference = int(round(current_time - start_time)) # on r√©cup√®re le temps √©coul√© depuis le lancement du bot (qu'on a initialis√© dans la fonction on_ready() )
    await ctx.reply("Temps depuis lancement : "+str(datetime.timedelta(seconds=difference))) 

# ===== ACTIF =====
    
@bot.hybrid_command(name = "actif", with_app_command = True, description = "Recois de l'argent tous les jours avec cette commande !")
@app_commands.guilds(discord.Object(id = 1136325238225895444))
async def actif(ctx: commands.Context):
    """
    Fonction pour recevoir 200‚Ç≠ tous les jours.

    On v√©rifie si la date de la derni√®re r√©compense re√ßue par l'utilisateur est sup√©rieure √† 24h.
    Si c'est le cas, on lui donne 200‚Ç≠ et on met √† jour la date de la derni√®re r√©compense.
    Sinon, on lui dit de revenir dans 24h.
    """

    cursor.execute(f"SELECT * FROM kactif LEFT JOIN kbanque ON kactif.id = kbanque.banque_id WHERE kactif.id = {ctx.author.id}")
    donnees = cursor.fetchall()

    # on v√©rifie si l'utilisateur est dans la table kactif
    if donnees != []:
        """"""
        for row in donnees:
            last_reward_time = row['kdate']
            last_reward_time = datetime.datetime.strptime(last_reward_time, "%Y-%m-%d %H:%M:%S.%f") # on convertit la date en objet datetime pour pouvoir la manipuler
            time_since_last_reward = datetime.datetime.now() - last_reward_time

            # on v√©rifie si la date de la derni√®re r√©compense est sup√©rieure √† 24h
            if time_since_last_reward >= datetime.timedelta(hours=24):

                # on v√©rifie si l'utilisateur est dans la table kbanque
                if row['montant'] is not None:

                    # on lui donne 200‚Ç≠ 
                    actuel = int(row['montant']) 
                    nouveau = actuel + 200

                    sql = "UPDATE kbanque SET montant = %s, bclassement = %s WHERE banque_id = %s"
                    val = (str(nouveau), "1", f"{ctx.author.id}")
                    cursor.execute(sql, val)
                
                # sinon, on cr√©e une nouvelle ligne pour lui
                else: # si on ne trouve pas l'utilisateur
                    sql = "INSERT INTO kbanque (id, montant, bclassement) VALUES (%s, %s, %s)"  
                    val = (ctx.author.id, f"200", "1")
                    cursor.execute(sql, val)
                
                sql = "UPDATE kactif SET kdate = %s WHERE id = %s"
                val = (str(datetime.datetime.now()), f"{ctx.author.id}")
                cursor.execute(sql, val)

                await ctx.reply("Bravo, tu as gagn√© tes 200‚Ç≠ journaliers. Reviens dans 24h pour en avoir 200 de plus !")
            else:
                # on lui dit de revenir dans 24h
                time_until_next_reward = last_reward_time + datetime.timedelta(hours=24) - datetime.datetime.now()
                hours, remainder = divmod(time_until_next_reward.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                await ctx.reply(f"D√©sol√©, mais tu ne peux r√©cup√©rer 200‚Ç≠ qu'1 fois par jour ! Reviens dans **{hours} heures et {minutes} minutes**.")
    else:
        # on cr√©e une nouvelle ligne pour lui
        sql = "INSERT INTO kactif (id, kdate) VALUES (%s, %s)"
        val = (f"{ctx.author.id}", str(datetime.datetime.now()))
        cursor.execute(sql, val)
        mydb.commit()

        cursor.execute(f"SELECT * FROM kactif LEFT JOIN kbanque ON kactif.id = kbanque.banque_id WHERE kactif.id = {ctx.author.id}")
        donnees = cursor.fetchall()

        # on v√©rifie si l'utilisateur est dans la table kbanque
        for row in donnees:
            if row['montant'] is not None: 

                # on lui donne 200‚Ç≠
                actuel = int(row['montant'])
                nouveau = actuel + 200

                sql = "UPDATE kbanque SET montant = %s, bclassement = %s WHERE banque_id = %s"
                val = (str(nouveau), "1", f"{ctx.author.id}")
                cursor.execute(sql, val)
            else:
                # sinon, on cr√©e une nouvelle ligne pour lui
                sql = "INSERT INTO kbanque (banque_id, montant, bclassement) VALUES (%s, %s, %s)"  
                val = (ctx.author.id, f"200", "1")
                cursor.execute(sql, val)
        await ctx.reply("Bravo, tu as gagn√© tes 200‚Ç≠ journaliers. Reviens dans 24h pour en avoir 200 de plus !")

    mydb.commit()

bot.run(os.getenv("TOKEN"))